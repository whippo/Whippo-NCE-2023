New Table( "trials2020_QAQC_Confetti_ByUrchin.jmp",
	Add Rows( 71 ),
	New Script(
		"Source",
		Data Table( "trials2020_QAQC_Confetti.jmp" ) <<
		Summary(
			Group(
				:ID, :trial, :bin, :tank, :treatment, :diameter, :pycno, :bucket,
				:trialtank
			),
			Mean( :consumedperhour_g ),
			Mean( :consumedperhour_pieces ),
			Mean( :consumed ),
			Mean( :biomassconsumed_g ),
			Freq( "None" ),
			Weight( "None" )
		)
	),
	New Column( "ID",
		Character( 4 ),
		"Nominal",
		Set Values(
			{"1_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "1_10", "1_12", "1_13",
			"1_14", "1_15", "1_16", "1_17", "1_18", "2_1", "2_2", "2_3", "2_5",
			"2_7", "2_9", "2_10", "2_11", "2_12", "2_13", "2_14", "2_15", "2_16",
			"2_17", "3_1", "3_2", "3_4", "3_5", "3_6", "3_7", "3_9", "3_10", "3_11",
			"3_12", "3_14", "3_15", "3_16", "3_17", "4_1", "4_2", "4_4", "4_5",
			"4_6", "4_7", "4_10", "4_11", "4_12", "4_14", "4_15", "4_16", "4_17",
			"4_18", "5_1", "5_2", "5_4", "5_5", "5_6", "5_7", "5_10", "5_11", "5_13",
			"5_14", "5_15", "5_16", "5_17", "5_18"}
		),
		Lock( 1 )
	),
	New Column( "trial",
		Numeric,
		"Nominal",
		Format( "Best", 12 ),
		Set Values(
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
			4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
		),
		Lock( 1 )
	),
	New Column( "bin",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Set Values(
			[1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 1, 2, 3, 5, 7, 9,
			10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15,
			16, 17, 1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 1, 2, 4, 5, 6,
			7, 10, 11, 13, 14, 15, 16, 17, 18]
		),
		Lock( 1 )
	),
	New Column( "tank",
		Character( 1 ),
		"Nominal",
		Set Values(
			{"C", "A", "A", "A", "C", "C", "C", "A", "B", "B", "B", "B", "B", "A",
			"C", "E", "E", "E", "E", "E", "D", "D", "D", "D", "E", "D", "E", "D",
			"D", "D", "E", "E", "D", "D", "D", "E", "D", "E", "E", "D", "E", "D",
			"E", "D", "E", "E", "E", "E", "D", "D", "D", "D", "E", "E", "D", "D",
			"E", "D", "E", "E", "D", "E", "D", "D", "D", "E", "E", "D", "E", "E",
			"D"}
		),
		Lock( 1 )
	),
	New Column( "treatment",
		Character( 5 ),
		"Nominal",
		Set Values(
			{"pycno", "empty", "empty", "empty", "pycno", "pycno", "pycno", "empty",
			"empty", "empty", "empty", "empty", "empty", "empty", "pycno", "empty",
			"empty", "empty", "empty", "empty", "pycno", "pycno", "pycno", "pycno",
			"empty", "pycno", "empty", "pycno", "pycno", "empty", "pycno", "pycno",
			"empty", "empty", "empty", "pycno", "empty", "pycno", "pycno", "empty",
			"pycno", "empty", "pycno", "pycno", "empty", "empty", "empty", "empty",
			"pycno", "pycno", "pycno", "pycno", "empty", "empty", "pycno", "pycno",
			"empty", "empty", "pycno", "pycno", "empty", "pycno", "empty", "empty",
			"empty", "pycno", "pycno", "empty", "pycno", "pycno", "empty"}
		),
		Lock( 1 )
	),
	New Column( "diameter",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Set Values(
			[75, 65, 68, 76, 68, 78, 65, 76, 75, 66, 69, 74, 71, 72, 61, 67, 79, 77,
			63, 68, 72, 62, 63, 71, 72, 76, 72, 69, 71, 63, 65, 71, 53, 65, 63, 42,
			61, 55, 90, 62, 75, 64, 74, 72, 74, 71, 80, 67, 58, 62, 64, 76, 65, 72,
			67, 71, 85, 69, 81, 70, 69, 71, 66, 57, 61, 75, 66, 66, 56, 66, 62]
		),
		Lock( 1 )
	),
	New Column( "pycno",
		Character( 3 ),
		"Nominal",
		Set Values(
			{"yes", "no", "no", "no", "yes", "yes", "yes", "no", "no", "no", "no",
			"no", "no", "no", "yes", "no", "no", "no", "no", "no", "yes", "yes",
			"yes", "yes", "no", "yes", "no", "yes", "yes", "no", "yes", "yes", "no",
			"no", "no", "yes", "no", "yes", "yes", "no", "yes", "no", "yes", "yes",
			"no", "no", "no", "no", "yes", "yes", "yes", "yes", "no", "no", "yes",
			"yes", "no", "no", "yes", "yes", "no", "yes", "no", "no", "no", "yes",
			"yes", "no", "yes", "yes", "no"}
		),
		Lock( 1 )
	),
	New Column( "bucket",
		Character( 5 ),
		"Nominal",
		Set Values(
			{"pycno", "empty", "empty", "empty", "pycno", "pycno", "pycno", "empty",
			"empty", "empty", "empty", "empty", "empty", "empty", "pycno", "empty",
			"empty", "empty", "empty", "empty", "pycno", "pycno", "pycno", "pycno",
			"empty", "pycno", "empty", "pycno", "pycno", "empty", "pycno", "pycno",
			"empty", "empty", "empty", "pycno", "empty", "pycno", "pycno", "empty",
			"pycno", "empty", "pycno", "pycno", "empty", "empty", "empty", "empty",
			"pycno", "pycno", "pycno", "pycno", "empty", "empty", "pycno", "pycno",
			"empty", "empty", "pycno", "pycno", "empty", "pycno", "empty", "empty",
			"empty", "pycno", "pycno", "empty", "pycno", "pycno", "empty"}
		),
		Lock( 1 )
	),
	New Column( "trialtank",
		Character( 2 ),
		"Nominal",
		Set Values(
			{"1C", "1A", "1A", "1A", "1C", "1C", "1C", "1A", "1B", "1B", "1B", "1B",
			"1B", "1A", "1C", "2E", "2E", "2E", "2E", "2E", "2D", "2D", "2D", "2D",
			"2E", "2D", "2E", "2D", "2D", "3D", "3E", "3E", "3D", "3D", "3D", "3E",
			"3D", "3E", "3E", "3D", "3E", "3D", "3E", "4D", "4E", "4E", "4E", "4E",
			"4D", "4D", "4D", "4D", "4E", "4E", "4D", "4D", "4E", "5D", "5E", "5E",
			"5D", "5E", "5D", "5D", "5D", "5E", "5E", "5D", "5E", "5E", "5D"}
		),
		Lock( 1 )
	),
	New Column( "N Rows",
		Numeric,
		"Continuous",
		Format( "Fixed Dec", 12, 0 ),
		Set Values(
			[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
		),
		Lock( 1 )
	),
	New Column( "Mean(consumedperhour_g)",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Set Values(
			[0.0548035714285714, 0.0296345238571429, 0.0828142857142857,
			0.103517857285714, 0.0227333334285714, 0.0824083332857143, 0, 0.093775,
			0.178619047714286, 0.106359523857143, 0.159133333, 0.120567857142857,
			0.00771309514285714, 0.0239511904285714, 0.00730714285714286,
			0.130400925888889, 0.380151851777778, 0.198916666555556,
			0.0723046296666667, 0.028100926, 0.0391518517777778, 0.0697787035555555,
			0.135768518444444, 0.0615694445555556, 0.00694629633333333,
			0.101668518666667, 0.0726203703333334, 0.0208388888888889,
			0.101352777888889, 0.213125, 0.00789351844444445, 0.0931435185555556,
			0.0161027777777778, 0.0378888888888889, 0.008525, 0.054938889,
			0.0464138888888889, 0.107667592555556, 0.0451509258888889,
			0.190075925888889, 0.00789351855555556, 0.042625, 0.0716731481111111,
			0.0852499998888889, 0.397833333222222, 0.283535185111111,
			0.201126851777778, 0.00757777766666667, 0.0505185184444445,
			0.128822222222222, 0.134505555555556, 0, 0.303742592666667,
			0.0138925925555556, 0.142399074111111, 0.0874601851111111,
			0.100721296333333, 0.246277777666667, 0.00157870377777778,
			0.104510185222222, 0.0764092594444445, 0.0246277777777778,
			0.132295370444444, 0.0959851852222222, 0.154712963111111, 0.017997222,
			0.181235185111111, 0.215335185333333, 0.0836712964444444,
			0.0502027777777778, 0.172078703555556]
		),
		Lock( 1 )
	),
	New Column( "Mean(consumedperhour_pieces)",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Set Values(
			[0.160714285714286, 0.0869047618571429, 0.242857142857143,
			0.303571428428571, 0.0666666665714286, 0.241666666714286, 0, 0.275,
			0.523809523714286, 0.311904761857143, 0.466666667, 0.353571428571429,
			0.0226190477142857, 0.0702380952857143, 0.0214285714285714,
			0.382407407444444, 1.11481481488889, 0.583333333444444, 0.212037037,
			0.0824074073333333, 0.114814814888889, 0.204629629777778,
			0.398148148222222, 0.180555555444444, 0.0203703703333333, 0.298148148,
			0.212962963, 0.0611111111111111, 0.297222222111111, 0.625,
			0.0231481482222222, 0.273148148111111, 0.0472222222222222,
			0.111111111111111, 0.025, 0.161111111, 0.136111111111111,
			0.315740740777778, 0.132407407444444, 0.557407407444444,
			0.0231481481111111, 0.125, 0.210185185222222, 0.250000000111111,
			1.16666666677778, 0.831481481555556, 0.589814814888889,
			0.0222222223333333, 0.148148148222222, 0.377777777777778,
			0.394444444444444, 0, 0.890740740666667, 0.0407407407777778,
			0.417592592555555, 0.256481481555556, 0.295370370333333,
			0.722222222333333, 0.00462962955555556, 0.306481481444444,
			0.224074073888889, 0.0722222222222222, 0.387962962888889,
			0.281481481444444, 0.453703703555555, 0.052777778, 0.531481481555556,
			0.631481481333333, 0.245370370222222, 0.147222222222222,
			0.504629629777778]
		),
		Lock( 1 )
	),
	New Column( "Mean(consumed)",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Set Values(
			[1.1, 0.3625, 1.6625, 2.025, 0.525, 1.5125, 0, 1.5125, 3.425, 2.1,
			2.6375, 1.8875, 0.1, 0.3875, 0.125, 2.3, 7.17, 3.88, 1.22, 0.57, 0.89,
			1.53, 2.88, 1.16, 0.17, 1.98, 1.82, 0.42, 1.87, 3.34, 0.15, 1.76, 0.24,
			0.75, 0.17, 1.01, 0.5, 2.26, 1, 3.28, 0.23, 0.95, 1.41, 1.89, 7.55, 5.21,
			3.46, 0.13, 1.04, 3.09, 2.32, 0, 5.57, 0.22, 3.06, 1.61, 1.32, 4.47,
			0.03, 1.9, 1.44, 0.28, 2.28, 1.6, 3.24, 0.42, 2.94, 3.61, 1.48, 1.02,
			2.77]
		),
		Lock( 1 )
	),
	New Column( "Mean(biomassconsumed_g)",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Set Values(
			[0.3751, 0.1236125, 0.5669125, 0.690525, 0.179025, 0.5157625, 0,
			0.5157625, 1.167925, 0.7161, 0.8993875, 0.6436375, 0.0341, 0.1321375,
			0.042625, 0.7843, 2.44497, 1.32308, 0.41602, 0.19437, 0.30349, 0.52173,
			0.98208, 0.39556, 0.05797, 0.67518, 0.62062, 0.14322, 0.63767, 1.13894,
			0.05115, 0.60016, 0.08184, 0.25575, 0.05797, 0.34441, 0.1705, 0.77066,
			0.341, 1.11848, 0.07843, 0.32395, 0.48081, 0.64449, 2.57455, 1.77661,
			1.17986, 0.04433, 0.35464, 1.05369, 0.79112, 0, 1.89937, 0.07502,
			1.04346, 0.54901, 0.45012, 1.52427, 0.01023, 0.6479, 0.49104, 0.09548,
			0.77748, 0.5456, 1.10484, 0.14322, 1.00254, 1.23101, 0.50468, 0.34782,
			0.94457]
		),
		Lock( 1 )
	),
	New Column( "Log_meanbiomassconsumed_g",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula( Log10( :"Mean(biomassconsumed_g)"n + 1 ) )
	)
) << Run Formulas;
Fit Model(
	Y( :Log_meanbiomassconsumed_g ),
	Effects( :diameter, :pycno, :diameter * :pycno ),
	Random Effects( :trialtank[:pycno] ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:Log_meanbiomassconsumed_g << {Summary of Fit( 1 ),
		Analysis of Variance( 0 ), Parameter Estimates( 1 ), Scaled Estimates( 0 ),
		Plot Actual by Predicted( 0 ), Plot Regression( 0 ),
		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ),
		Plot Effect Leverage( 0 ), Plot Residual by Normal Quantiles( 0 )}
	)
);